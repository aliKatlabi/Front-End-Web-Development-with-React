
run the json-server 
	json-server --watch db.json -p 3001 -d 2000

install cross-fetch 
	yarn add cross-fetch

configure the application to connect with the server 

	- create baseUrl.js 
		export const baseUrl='http://localhost:3001/';
		
		to use it in ActionCreators.js
		
	- lets add more actions in ActionTypes.js 
	
		export const ADD_COMMENTS = 'ADD_COMMENTS';
		export const COMMENTS_FAILED = 'COMMENTS_FAILED';
		export const PROMOS_LOADING = 'PROMOS_LOADING';
		export const ADD_PROMOS = 'ADD_PROMOS';
		export const PROMOS_FAILED = 'PROMOS_FAILED';
	
	- UPDATE ActionCreators.js 
	
		instead of setTimeOut(..) simulation we add actual communication with server using fetch
		
			 return fetch(baseUrl + 'dishes')
				.then(response => response.json())
				.then(dishes => dispatch(addDishes(dishes)));
	
		- we make fetchComments/commentsFailed/addComments actions same as what dishes has  
		
			export const fetchComments = () => (dispatch) => {
				return fetch(baseUrl+'comments')
					.then(response=>response.json())
					.then(comments=>dispatch(addComments(comments)));
			}
		
		# same can be done for 'promotions' actions 
		
		
		- we deal with the new actions we made for comments and promotions
			- in redux/comments.js  
				# we correct the state = COMMENTS 
					state = {errmess:null, comments:[]}
				# we add new cases 
				    case ActionTypes.ADD_COMMENTS:
					  return {...state, errMess: null, comments: action.payload};

					case ActionTypes.COMMENTS_FAILED:
					  return {...state, errMess: action.payload};
				# no COMMENTS_LOADING needed ( becuase it should be fetched by the time we nav there)

			- in redux/promotions.js we do the same as before
				# but we deal PROMOS_LOADING
				# we correct the state = PROMOTIONS 
					state = {isLoading:true, errmess:null, promotions:[]}
		
		
		- NOW we map the new action reducers into new names in 
			mapDispatchToProps{...}
		to represent dispatching the actions to the store 
		- AND we add them to 
			 componentDidMount() {...}
		
		- THEN we pass the actions to the corresponding component as props
			in <Home> <DishDetail>
		- to serve the images from server we just change the src into source of the server + name of image 
			
			import { baseUrl } from '../shared/baseUrl';
				
			<CardImg top src={baseUrl + dish.image} alt={dish.name} />
		
	
		
			

				
		